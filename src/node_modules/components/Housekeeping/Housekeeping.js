import React, {useState} from 'react'
import styled from 'styled-components';
import {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';

const Container = styled.div`
  display: flex
`
const initialData = {
  tasks: {
  'task-1': {id: 'task-1', content: 'content-1'},
  'task-2': {id: 'task-2', content: 'content-2'},
  'task-3': {id: 'task-3', content: 'content-3'},
  'task-4': {id: 'task-4', content: 'content-4'},
  'task-5': {id: 'task-5', content: 'content-5'}
  },
  columns: {
    'column-1':{
      id:'column-1',
      title: 'Column1',
      taskIds: ['task-1', 'task-2', 'task-3', 'task-4', 'task-5']
    },
    'column-2':{
      id:'column-2',
      title: 'Column2',
      taskIds: []
    },
    'column-3':{
      id:'column-3',
      title: 'Column3',
      taskIds: []
    }
  },
  columnOrder: ['column-1', 'column-2', 'column-3'] 
}

const Housekeeping = ({children}) => {

  const [state, setState] = useState(initialData)
  const onDragEnd = rezult => {
  console.log(rezult)
    const {
      draggableId,
      source,
      destination,
    } = rezult;
    if (!destination || (source.index === destination.index
      && source.droppableId === destination.droppableId)) {
      return;
    }
    if (source.droppableId === destination.droppableId) {
      const newTaskIds = [...state.columns[destination.droppableId].taskIds];
      if (source.index < destination.index) {
        newTaskIds.splice(destination.index + 1, 0, draggableId)
        newTaskIds.splice(source.index, 1)
      } else {
        newTaskIds.splice(source.index, 1)
        newTaskIds.splice(destination.index, 0, draggableId)
      }
      setState(prevState => {
        const newState = {
          ...prevState,
        };
        newState.columns[destination.droppableId].taskIds = newTaskIds;
        return newState;
      })
    } else {
      const newStartTaskIds = [...state.columns[source.droppableId].taskIds];
      const newEndTaskIds = [...state.columns[destination.droppableId].taskIds];
      newStartTaskIds.splice(source.index, 1);
      if (destination.index === newEndTaskIds.length) {
        newEndTaskIds.push(draggableId)
      } else {
        newEndTaskIds.splice(destination.index, 0, draggableId);
      }

      setState(prevState => {
        const newState = {
          ...prevState,
        };
        newState.columns[source.droppableId].taskIds = newStartTaskIds;
        newState.columns[destination.droppableId].taskIds = newEndTaskIds;
        return newState;
      })
    }

    

  }

  return (<React.Fragment>
  <div>React housekeeping {children}</div>
  <div>
    <DragDropContext
          onDragEnd={onDragEnd}
        >
            <Container>
                {state.columnOrder.map(columnID => {
                  const column = state.columns[columnID];
                  const tasks = column.taskIds.map(taskId => state.tasks[taskId])
                  return <Column key={column.id} tasks={tasks} column={column} />
                })}
            </Container>
        </DragDropContext>
  </div>
  </React.Fragment>)
}





const ColumnContainer = styled.div`
  border: 1px solid lightgray;
  border-radius: 2px;
  margin: 8px;
  width: 220px;
  display: flex;
  flex-direction: column;
`;
const Title = styled.h3`
  padding: 8px;
`;
const TaskList = styled.div`
  min-height: 100 px;
  flex-grow: 1;
  padding: 8px;
  background-color: ${props => props.isDraggingOver ? 'lightblue': 'white'}
`;

const Column = ({column, tasks}) => {
  const {title, id} = column;
  return (
    <ColumnContainer>
      <Title>{title}</Title>
      <Droppable droppableId={id}>
      {(provided, snapshot) => (
        <div  {...provided.droppableProps} ref={provided.innerRef}>
        {
          tasks.map((task, i) => <Task key={task.id} task={task} index={i}/>)
        }
        {
          provided.placeholder
        }
        </div>
      )}
      </Droppable>
    </ColumnContainer>
  )
}

const TaskContainer = styled.div`
  border: 1px solid lightgray;
  border-radius: 2px;
  margin-bottom: 8px;
  padding: 8px;
  background-color: ${props => props.isDragging ? 'lightGreen': 'white'};
`;

const Task = ({task, index}) => {
const {content, id} = task;
  return (
    <Draggable draggableId={id} index={index}>
      {
        (provided, snapshot) => (
          <div
            {...provided.draggableProps}
            {...provided.dragHandleProps}
            ref={provided.innerRef}
          >
            {content}
          </div>
        )
      }
    </Draggable>
    )
}

export default Housekeeping;